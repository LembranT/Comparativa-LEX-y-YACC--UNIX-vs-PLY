Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> PRINT expr SEMI
Rule 2     expr -> expr PLUS expr
Rule 3     expr -> expr MINUS expr
Rule 4     expr -> INTEGER

Terminals, with rules where they appear

INTEGER              : 4
MINUS                : 3
PLUS                 : 2
PRINT                : 1
SEMI                 : 1
error                : 

Nonterminals, with rules where they appear

expr                 : 1 2 2 3 3
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . PRINT expr SEMI

    PRINT           shift and go to state 2

    statement                      shift and go to state 1

state 1

    (0) S' -> statement .



state 2

    (1) statement -> PRINT . expr SEMI
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . INTEGER

    INTEGER         shift and go to state 4

    expr                           shift and go to state 3

state 3

    (1) statement -> PRINT expr . SEMI
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr

    SEMI            shift and go to state 5
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7


state 4

    (4) expr -> INTEGER .

    SEMI            reduce using rule 4 (expr -> INTEGER .)
    PLUS            reduce using rule 4 (expr -> INTEGER .)
    MINUS           reduce using rule 4 (expr -> INTEGER .)


state 5

    (1) statement -> PRINT expr SEMI .

    $end            reduce using rule 1 (statement -> PRINT expr SEMI .)


state 6

    (2) expr -> expr PLUS . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . INTEGER

    INTEGER         shift and go to state 4

    expr                           shift and go to state 8

state 7

    (3) expr -> expr MINUS . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . INTEGER

    INTEGER         shift and go to state 4

    expr                           shift and go to state 9

state 8

    (2) expr -> expr PLUS expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMI            reduce using rule 2 (expr -> expr PLUS expr .)
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7

  ! PLUS            [ reduce using rule 2 (expr -> expr PLUS expr .) ]
  ! MINUS           [ reduce using rule 2 (expr -> expr PLUS expr .) ]


state 9

    (3) expr -> expr MINUS expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMI            reduce using rule 3 (expr -> expr MINUS expr .)
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7

  ! PLUS            [ reduce using rule 3 (expr -> expr MINUS expr .) ]
  ! MINUS           [ reduce using rule 3 (expr -> expr MINUS expr .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 8 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 8 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 9 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 9 resolved as shift
