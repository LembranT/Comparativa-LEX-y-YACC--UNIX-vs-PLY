Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PRINT expr SEMI
Rule 2     program -> error SEMI
Rule 3     expr -> expr PLUS expr
Rule 4     expr -> expr MINUS expr
Rule 5     expr -> MINUS expr
Rule 6     expr -> INTEGER

Terminals, with rules where they appear

INTEGER              : 6
MINUS                : 4 5
PLUS                 : 3
PRINT                : 1
SEMI                 : 1 2
error                : 2

Nonterminals, with rules where they appear

expr                 : 1 3 3 4 4 5
program              : 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PRINT expr SEMI
    (2) program -> . error SEMI

    PRINT           shift and go to state 2
    error           shift and go to state 3

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PRINT . expr SEMI
    (3) expr -> . expr PLUS expr
    (4) expr -> . expr MINUS expr
    (5) expr -> . MINUS expr
    (6) expr -> . INTEGER

    MINUS           shift and go to state 5
    INTEGER         shift and go to state 6

    expr                           shift and go to state 4

state 3

    (2) program -> error . SEMI

    SEMI            shift and go to state 7


state 4

    (1) program -> PRINT expr . SEMI
    (3) expr -> expr . PLUS expr
    (4) expr -> expr . MINUS expr

    SEMI            shift and go to state 8
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10


state 5

    (5) expr -> MINUS . expr
    (3) expr -> . expr PLUS expr
    (4) expr -> . expr MINUS expr
    (5) expr -> . MINUS expr
    (6) expr -> . INTEGER

    MINUS           shift and go to state 5
    INTEGER         shift and go to state 6

    expr                           shift and go to state 11

state 6

    (6) expr -> INTEGER .

    SEMI            reduce using rule 6 (expr -> INTEGER .)
    PLUS            reduce using rule 6 (expr -> INTEGER .)
    MINUS           reduce using rule 6 (expr -> INTEGER .)


state 7

    (2) program -> error SEMI .

    $end            reduce using rule 2 (program -> error SEMI .)


state 8

    (1) program -> PRINT expr SEMI .

    $end            reduce using rule 1 (program -> PRINT expr SEMI .)


state 9

    (3) expr -> expr PLUS . expr
    (3) expr -> . expr PLUS expr
    (4) expr -> . expr MINUS expr
    (5) expr -> . MINUS expr
    (6) expr -> . INTEGER

    MINUS           shift and go to state 5
    INTEGER         shift and go to state 6

    expr                           shift and go to state 12

state 10

    (4) expr -> expr MINUS . expr
    (3) expr -> . expr PLUS expr
    (4) expr -> . expr MINUS expr
    (5) expr -> . MINUS expr
    (6) expr -> . INTEGER

    MINUS           shift and go to state 5
    INTEGER         shift and go to state 6

    expr                           shift and go to state 13

state 11

    (5) expr -> MINUS expr .
    (3) expr -> expr . PLUS expr
    (4) expr -> expr . MINUS expr

    SEMI            reduce using rule 5 (expr -> MINUS expr .)
    PLUS            reduce using rule 5 (expr -> MINUS expr .)
    MINUS           reduce using rule 5 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]


state 12

    (3) expr -> expr PLUS expr .
    (3) expr -> expr . PLUS expr
    (4) expr -> expr . MINUS expr

    SEMI            reduce using rule 3 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 3 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 3 (expr -> expr PLUS expr .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]


state 13

    (4) expr -> expr MINUS expr .
    (3) expr -> expr . PLUS expr
    (4) expr -> expr . MINUS expr

    SEMI            reduce using rule 4 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 4 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 4 (expr -> expr MINUS expr .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]

